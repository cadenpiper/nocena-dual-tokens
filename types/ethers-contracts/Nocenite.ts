/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface NoceniteInterface extends Interface {
    getFunction(nameOrSignature: "addRewardMinter" | "allowance" | "approve" | "balanceOf" | "decimals" | "isRewardMinter" | "mint" | "name" | "owner" | "removeRewardMinter" | "renounceOwnership" | "rewardMinters" | "symbol" | "totalSupply" | "transfer" | "transferFrom" | "transferOwnership"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "Approval" | "OwnershipTransferred" | "RewardMinterUpdated" | "Transfer"): EventFragment;

    encodeFunctionData(functionFragment: 'addRewardMinter', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'allowance', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'approve', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'balanceOf', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
encodeFunctionData(functionFragment: 'isRewardMinter', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'mint', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'name', values?: undefined): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'removeRewardMinter', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'rewardMinters', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
encodeFunctionData(functionFragment: 'transfer', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'transferFrom', values: [AddressLike, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;

    decodeFunctionResult(functionFragment: 'addRewardMinter', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isRewardMinter', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'removeRewardMinter', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'rewardMinters', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  }

  
    export namespace ApprovalEvent {
      export type InputTuple = [owner: AddressLike, spender: AddressLike, value: BigNumberish];
      export type OutputTuple = [owner: string, spender: string, value: bigint];
      export interface OutputObject {owner: string, spender: string, value: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RewardMinterUpdatedEvent {
      export type InputTuple = [minter: AddressLike, authorized: boolean];
      export type OutputTuple = [minter: string, authorized: boolean];
      export interface OutputObject {minter: string, authorized: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TransferEvent {
      export type InputTuple = [from: AddressLike, to: AddressLike, value: BigNumberish];
      export type OutputTuple = [from: string, to: string, value: bigint];
      export interface OutputObject {from: string, to: string, value: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface Nocenite extends BaseContract {
    
    connect(runner?: ContractRunner | null): Nocenite;
    waitForDeployment(): Promise<this>;

    interface: NoceniteInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    addRewardMinter: TypedContractMethod<
      [minter: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    allowance: TypedContractMethod<
      [owner: AddressLike, spender: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    approve: TypedContractMethod<
      [spender: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >
    

    
    balanceOf: TypedContractMethod<
      [account: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    decimals: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    isRewardMinter: TypedContractMethod<
      [minter: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    mint: TypedContractMethod<
      [to: AddressLike, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    name: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    removeRewardMinter: TypedContractMethod<
      [minter: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    rewardMinters: TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    symbol: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    totalSupply: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    transfer: TypedContractMethod<
      [to: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >
    

    
    transferFrom: TypedContractMethod<
      [from: AddressLike, to: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'addRewardMinter'): TypedContractMethod<
      [minter: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'allowance'): TypedContractMethod<
      [owner: AddressLike, spender: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'approve'): TypedContractMethod<
      [spender: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'balanceOf'): TypedContractMethod<
      [account: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'decimals'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'isRewardMinter'): TypedContractMethod<
      [minter: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'mint'): TypedContractMethod<
      [to: AddressLike, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'name'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'removeRewardMinter'): TypedContractMethod<
      [minter: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'rewardMinters'): TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'symbol'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'totalSupply'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'transfer'): TypedContractMethod<
      [to: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferFrom'): TypedContractMethod<
      [from: AddressLike, to: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'Approval'): TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'RewardMinterUpdated'): TypedContractEvent<RewardMinterUpdatedEvent.InputTuple, RewardMinterUpdatedEvent.OutputTuple, RewardMinterUpdatedEvent.OutputObject>;
getEvent(key: 'Transfer'): TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;

    filters: {
      
      'Approval(address,address,uint256)': TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
      Approval: TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'RewardMinterUpdated(address,bool)': TypedContractEvent<RewardMinterUpdatedEvent.InputTuple, RewardMinterUpdatedEvent.OutputTuple, RewardMinterUpdatedEvent.OutputObject>;
      RewardMinterUpdated: TypedContractEvent<RewardMinterUpdatedEvent.InputTuple, RewardMinterUpdatedEvent.OutputTuple, RewardMinterUpdatedEvent.OutputObject>;
    

      'Transfer(address,address,uint256)': TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
      Transfer: TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
    
    };
  }