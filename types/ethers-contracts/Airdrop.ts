/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface AirdropInterface extends Interface {
    getFunction(nameOrSignature: "WEEK_DURATION" | "YEAR_DURATION" | "deploymentTime" | "executeWeeklyAirdrop" | "getAirdropInfo" | "getCurrentWeek" | "getCurrentYear" | "getWeeklyRewardAmount" | "nocenite" | "nocenix" | "owner" | "renounceOwnership" | "totalAirdropsExecuted" | "transferOwnership" | "weeklyAirdropExecuted"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "AirdropExecuted" | "OwnershipTransferred"): EventFragment;

    encodeFunctionData(functionFragment: 'WEEK_DURATION', values?: undefined): string;
encodeFunctionData(functionFragment: 'YEAR_DURATION', values?: undefined): string;
encodeFunctionData(functionFragment: 'deploymentTime', values?: undefined): string;
encodeFunctionData(functionFragment: 'executeWeeklyAirdrop', values: [AddressLike[]]): string;
encodeFunctionData(functionFragment: 'getAirdropInfo', values?: undefined): string;
encodeFunctionData(functionFragment: 'getCurrentWeek', values?: undefined): string;
encodeFunctionData(functionFragment: 'getCurrentYear', values?: undefined): string;
encodeFunctionData(functionFragment: 'getWeeklyRewardAmount', values?: undefined): string;
encodeFunctionData(functionFragment: 'nocenite', values?: undefined): string;
encodeFunctionData(functionFragment: 'nocenix', values?: undefined): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalAirdropsExecuted', values?: undefined): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'weeklyAirdropExecuted', values: [BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'WEEK_DURATION', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'YEAR_DURATION', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'deploymentTime', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'executeWeeklyAirdrop', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getAirdropInfo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getCurrentWeek', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getCurrentYear', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getWeeklyRewardAmount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'nocenite', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'nocenix', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalAirdropsExecuted', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'weeklyAirdropExecuted', data: BytesLike): Result;
  }

  
    export namespace AirdropExecutedEvent {
      export type InputTuple = [weekNumber: BigNumberish, totalAmount: BigNumberish, recipientCount: BigNumberish];
      export type OutputTuple = [weekNumber: bigint, totalAmount: bigint, recipientCount: bigint];
      export interface OutputObject {weekNumber: bigint, totalAmount: bigint, recipientCount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface Airdrop extends BaseContract {
    
    connect(runner?: ContractRunner | null): Airdrop;
    waitForDeployment(): Promise<this>;

    interface: AirdropInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    WEEK_DURATION: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    YEAR_DURATION: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    deploymentTime: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    executeWeeklyAirdrop: TypedContractMethod<
      [recipients: AddressLike[], ],
      [void],
      'nonpayable'
    >
    

    
    getAirdropInfo: TypedContractMethod<
      [],
      [[bigint, bigint, bigint, boolean, bigint] & {currentWeek: bigint, currentYear: bigint, weeklyReward: bigint, weekExecuted: boolean, totalExecuted: bigint }],
      'view'
    >
    

    
    getCurrentWeek: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getCurrentYear: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getWeeklyRewardAmount: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    nocenite: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    nocenix: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    totalAirdropsExecuted: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    weeklyAirdropExecuted: TypedContractMethod<
      [arg0: BigNumberish, ],
      [boolean],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'WEEK_DURATION'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'YEAR_DURATION'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'deploymentTime'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'executeWeeklyAirdrop'): TypedContractMethod<
      [recipients: AddressLike[], ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getAirdropInfo'): TypedContractMethod<
      [],
      [[bigint, bigint, bigint, boolean, bigint] & {currentWeek: bigint, currentYear: bigint, weeklyReward: bigint, weekExecuted: boolean, totalExecuted: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'getCurrentWeek'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getCurrentYear'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getWeeklyRewardAmount'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'nocenite'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'nocenix'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'totalAirdropsExecuted'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'weeklyAirdropExecuted'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [boolean],
      'view'
    >;

    getEvent(key: 'AirdropExecuted'): TypedContractEvent<AirdropExecutedEvent.InputTuple, AirdropExecutedEvent.OutputTuple, AirdropExecutedEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;

    filters: {
      
      'AirdropExecuted(uint256,uint256,uint256)': TypedContractEvent<AirdropExecutedEvent.InputTuple, AirdropExecutedEvent.OutputTuple, AirdropExecutedEvent.OutputObject>;
      AirdropExecuted: TypedContractEvent<AirdropExecutedEvent.InputTuple, AirdropExecutedEvent.OutputTuple, AirdropExecutedEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    
    };
  }